var p=Object.defineProperty;var y=Object.getOwnPropertySymbols;var $=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var E=(e,t,r)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,f=(e,t)=>{for(var r in t||(t={}))$.call(t,r)&&E(e,r,t[r]);if(y)for(var r of y(t))F.call(t,r)&&E(e,r,t[r]);return e};var s=(e,t,r)=>new Promise((n,i)=>{var w=h=>{try{d(r.next(h))}catch(m){i(m)}},l=h=>{try{d(r.throw(h))}catch(m){i(m)}},d=h=>h.done?n(h.value):Promise.resolve(h.value).then(w,l);d((r=r.apply(e,t)).next())});const o="http://192.168.68.102:8080/api",c=e=>s(void 0,null,function*(){if(!e.ok){const t=yield e.text();let r;try{r=JSON.parse(t).error||`HTTP error! status: ${e.status}`}catch(n){r=`HTTP error! status: ${e.status}`}throw console.error("API Error:",{status:e.status,statusText:e.statusText,url:e.url,error:r}),new Error(r)}try{const t=yield e.text();return t?JSON.parse(t):null}catch(t){throw console.error("Error parsing response:",t),new Error("Failed to parse server response")}}),a={"Content-Type":"application/json",Accept:"application/json",Origin:window.location.origin,"X-Requested-With":"XMLHttpRequest"},g=e=>{var t;return{id:e.id,name:e.name,shortName:e.shortName||"",logo:e.logo||"",primaryColor:e.primaryColor||"#000000",secondaryColor:e.secondaryColor||"#ffffff",founded:((t=e.foundedYear)==null?void 0:t.toString())||"",city:e.city||"",country:e.country||"",website:e.website||"",description:e.description||"",venue:e.stadium||"",created_at:e.created_at,updated_at:e.updated_at}},u=e=>({id:e.id,team_id:e.team_id,team_name:e.team_name||"",name:e.name,number:e.number||0,position:e.position,nationality:e.nationality||"",age:e.age||0,height:e.height||0,weight:e.weight||0,photo:e.photo||"",stats:{games:e.stats.games,goals:e.stats.goals,assists:e.stats.assists,yellowCards:e.stats.yellowCards,redCards:e.stats.redCards},created_at:e.created_at,updated_at:e.updated_at}),C={getAll:()=>s(void 0,null,function*(){try{console.log("Fetching teams from:",`${o}/teams`);const e=yield fetch(`${o}/teams`,{method:"GET",headers:a});return(yield c(e)).map(g)}catch(e){throw console.error("Error fetching teams:",e),new Error("Failed to fetch teams. Please check if the server is running.")}}),getById:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/teams/${e}`,{headers:a}),r=yield c(t);return g(r)}catch(t){throw console.error("Error fetching team:",t),new Error("Failed to fetch team. Please check if the server is running.")}}),create:e=>s(void 0,null,function*(){const t=f({},e);try{const r=yield fetch(`${o}/teams`,{method:"POST",headers:a,body:JSON.stringify(t)}),n=yield c(r);return g(n)}catch(r){throw console.error("Error creating team:",r),new Error("Failed to create team. Please check if the server is running.")}}),update:(e,t)=>s(void 0,null,function*(){const r=f({},t);try{const n=yield fetch(`${o}/teams/${e}`,{method:"PUT",headers:a,body:JSON.stringify(r)}),i=yield c(n);return g(i)}catch(n){throw console.error("Error updating team:",n),new Error("Failed to update team. Please check if the server is running.")}}),delete:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/teams/${e}`,{method:"DELETE",headers:a});return c(t)}catch(t){throw console.error("Error deleting team:",t),new Error("Failed to delete team. Please check if the server is running.")}})},P={getByTeam:e=>s(void 0,null,function*(){try{console.log("API: Fetching players for team:",e);const t=`${o}/players${e?`?team_id=${e}`:""}`;console.log("API: Request URL:",t);const r=yield fetch(t,{headers:a});console.log("API: Response status:",r.status);const n=yield c(r);console.log("API: Received players from backend:",n);const i=n.map(u);return console.log("API: Mapped players:",i),i}catch(t){throw console.error("API: Error fetching players:",t),new Error("Failed to fetch players. Please check if the server is running.")}}),create:e=>s(void 0,null,function*(){var r,n,i,w,l;console.log("Creating player with data:",e);const t={name:e.name,position:e.position,number:e.number,team_id:e.team_id,team_name:e.team_name,photo:e.photo,nationality:e.nationality,age:e.age,height:e.height,weight:e.weight,stats:{games:((r=e.stats)==null?void 0:r.games)||0,goals:((n=e.stats)==null?void 0:n.goals)||0,assists:((i=e.stats)==null?void 0:i.assists)||0,yellowCards:((w=e.stats)==null?void 0:w.yellowCards)||0,redCards:((l=e.stats)==null?void 0:l.redCards)||0}};console.log("Sending to backend:",t);try{const d=yield fetch(`${o}/players`,{method:"POST",headers:a,body:JSON.stringify(t)}),h=yield c(d);return console.log("Received response from backend:",h),u(h)}catch(d){throw console.error("Error creating player:",d),new Error("Failed to create player. Please check if the server is running.")}}),update:(e,t)=>s(void 0,null,function*(){console.log("Updating player with ID:",e,"and data:",t);const r={name:t.name,position:t.position,number:t.number,team_id:t.team_id,team_name:t.team_name,photo:t.photo,nationality:t.nationality,age:t.age,height:t.height,weight:t.weight,stats:t.stats?{games:t.stats.games||0,goals:t.stats.goals||0,assists:t.stats.assists||0,yellowCards:t.stats.yellowCards||0,redCards:t.stats.redCards||0}:void 0};console.log("Sending to backend:",r);try{const n=yield fetch(`${o}/players/${e}`,{method:"PUT",headers:a,body:JSON.stringify(r)}),i=yield c(n);return console.log("Received response from backend:",i),u(i)}catch(n){throw console.error("Error updating player:",n),new Error("Failed to update player. Please check if the server is running.")}}),delete:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/players/${e}`,{method:"DELETE",headers:a});return c(t)}catch(t){throw console.error("Error deleting player:",t),new Error("Failed to delete player. Please check if the server is running.")}})},S={getAll:()=>s(void 0,null,function*(){try{const e=yield fetch(`${o}/matches`,{headers:a});return yield c(e)}catch(e){throw console.error("Error fetching matches:",e),new Error("Failed to fetch matches. Please check if the server is running.")}}),getById:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/matches/${e}`,{headers:a});return yield c(t)}catch(t){throw console.error("Error fetching match:",t),new Error("Failed to fetch match. Please check if the server is running.")}}),create:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/matches`,{method:"POST",headers:a,body:JSON.stringify(e)});return yield c(t)}catch(t){throw console.error("Error creating match:",t),new Error("Failed to create match. Please check if the server is running.")}}),update:(e,t)=>s(void 0,null,function*(){try{const r=yield fetch(`${o}/matches/${e}`,{method:"PUT",headers:a,body:JSON.stringify(t)});return yield c(r)}catch(r){throw console.error("Error updating match:",r),new Error("Failed to update match. Please check if the server is running.")}}),delete:e=>s(void 0,null,function*(){try{const t=yield fetch(`${o}/matches/${e}`,{method:"DELETE",headers:a});yield c(t)}catch(t){throw console.error("Error deleting match:",t),new Error("Failed to delete match. Please check if the server is running.")}})},T={getAll:()=>s(void 0,null,function*(){const e=yield fetch(`${o}/news`,{headers:a});if(!e.ok)throw new Error("Failed to fetch news");return e.json()}),getById:e=>s(void 0,null,function*(){const t=yield fetch(`${o}/news/${e}`,{headers:a});if(!t.ok)throw new Error("Failed to fetch news item");return t.json()}),create:e=>s(void 0,null,function*(){const t=yield fetch(`${o}/news`,{method:"POST",headers:a,body:JSON.stringify(e)});if(!t.ok)throw new Error("Failed to create news");return t.json()}),update:(e,t)=>s(void 0,null,function*(){const r=yield fetch(`${o}/news/${e}`,{method:"PUT",headers:a,body:JSON.stringify(t)});if(!r.ok)throw new Error("Failed to update news");return r.json()}),delete:e=>s(void 0,null,function*(){if(!(yield fetch(`${o}/news/${e}`,{method:"DELETE",headers:a})).ok)throw new Error("Failed to delete news")})},v=()=>s(void 0,null,function*(){const e=yield fetch(`${o}/coaches`,{headers:a});if(!e.ok)throw new Error("Failed to fetch coaches");return e.json()}),O=e=>s(void 0,null,function*(){const t=yield fetch(`${o}/coaches`,{method:"POST",headers:a,body:JSON.stringify(e)});if(!t.ok)throw new Error("Failed to create coach");return t.json()}),A=(e,t)=>s(void 0,null,function*(){const r=yield fetch(`${o}/coaches/${e}`,{method:"PUT",headers:a,body:JSON.stringify(t)});if(!r.ok)throw new Error("Failed to update coach");return r.json()}),k=e=>s(void 0,null,function*(){if(!(yield fetch(`${o}/coaches/${e}`,{method:"DELETE",headers:a})).ok)throw new Error("Failed to delete coach")}),N=()=>s(void 0,null,function*(){const e=yield fetch(`${o}/teams`,{headers:a});if(!e.ok)throw new Error("Failed to fetch teams");return e.json()});export{v as a,O as c,k as d,N as g,S as m,T as n,P as p,C as t,A as u};
//# sourceMappingURL=api2.js.map
