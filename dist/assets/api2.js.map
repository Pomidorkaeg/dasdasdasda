{"version":3,"file":"api2.js","sources":["../../src/api/api.ts"],"sourcesContent":["import { Team as TeamModel, Match, News, Media } from '@/types/models';\nimport { Team as FrontendTeam } from '@/types/team';\nimport { Player as FrontendPlayer } from '@/types/models';\nimport { Coach } from '@/types/coach';\n\nconst API_BASE_URL = 'http://192.168.68.102:8080/api';\n\n// Helper function for API calls\nconst handleResponse = async (response: Response) => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage;\n    try {\n      const errorData = JSON.parse(errorText);\n      errorMessage = errorData.error || `HTTP error! status: ${response.status}`;\n    } catch {\n      errorMessage = `HTTP error! status: ${response.status}`;\n    }\n    console.error('API Error:', {\n      status: response.status,\n      statusText: response.statusText,\n      url: response.url,\n      error: errorMessage\n    });\n    throw new Error(errorMessage);\n  }\n\n  try {\n    const text = await response.text();\n    if (!text) return null;\n    return JSON.parse(text);\n  } catch (error) {\n    console.error('Error parsing response:', error);\n    throw new Error('Failed to parse server response');\n  }\n};\n\n// Default headers for all API requests\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Origin': window.location.origin,\n  'X-Requested-With': 'XMLHttpRequest'\n};\n\n// Map backend Team model to frontend Team type\nconst mapBackendTeamToFrontend = (backendTeam: TeamModel): FrontendTeam => {\n  return {\n    id: backendTeam.id,\n    name: backendTeam.name,\n    shortName: backendTeam.shortName || '',\n    logo: backendTeam.logo || '',\n    primaryColor: backendTeam.primaryColor || '#000000',\n    secondaryColor: backendTeam.secondaryColor || '#ffffff',\n    founded: backendTeam.foundedYear?.toString() || '',\n    city: backendTeam.city || '',\n    country: backendTeam.country || '',\n    website: backendTeam.website || '',\n    description: backendTeam.description || '',\n    venue: backendTeam.stadium || '',\n    created_at: (backendTeam as any).created_at,\n    updated_at: (backendTeam as any).updated_at\n  };\n};\n\n// Local type definitions for backend API\ninterface BackendPlayerModel {\n  id: string;\n  team_id: string;\n  team_name: string;\n  name: string;\n  position: string;\n  number: number;\n  nationality: string;\n  age: number;\n  height: number;\n  weight: number;\n  photo: string;\n  stats: {\n    games: number;\n    goals: number;\n    assists: number;\n    yellowCards: number;\n    redCards: number;\n  };\n  created_at?: string;\n  updated_at?: string;\n}\n\n// Map backend Player model to frontend Player type\nconst mapBackendPlayerToFrontend = (backendPlayer: BackendPlayerModel): FrontendPlayer => {\n  return {\n    id: backendPlayer.id,\n    team_id: backendPlayer.team_id,\n    team_name: backendPlayer.team_name || '',\n    name: backendPlayer.name,\n    number: backendPlayer.number || 0,\n    position: backendPlayer.position,\n    nationality: backendPlayer.nationality || '',\n    age: backendPlayer.age || 0,\n    height: backendPlayer.height || 0,\n    weight: backendPlayer.weight || 0,\n    photo: backendPlayer.photo || '',\n    stats: {\n      games: backendPlayer.stats.games,\n      goals: backendPlayer.stats.goals,\n      assists: backendPlayer.stats.assists,\n      yellowCards: backendPlayer.stats.yellowCards,\n      redCards: backendPlayer.stats.redCards\n    },\n    created_at: backendPlayer.created_at,\n    updated_at: backendPlayer.updated_at\n  };\n};\n\n// Teams API\nexport const teamsApi = {\n  getAll: async (): Promise<FrontendTeam[]> => {\n    try {\n      console.log('Fetching teams from:', `${API_BASE_URL}/teams`);\n      const res = await fetch(`${API_BASE_URL}/teams`, {\n        method: 'GET',\n        headers: defaultHeaders\n      });\n      const backendTeams: TeamModel[] = await handleResponse(res);\n      return backendTeams.map(mapBackendTeamToFrontend);\n    } catch (error) {\n      console.error('Error fetching teams:', error);\n      throw new Error('Failed to fetch teams. Please check if the server is running.');\n    }\n  },\n  \n  getById: async (id: string): Promise<FrontendTeam> => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/teams/${id}`, {\n        headers: defaultHeaders\n      });\n      const backendTeam: TeamModel = await handleResponse(res);\n      return mapBackendTeamToFrontend(backendTeam);\n    } catch (error) {\n      console.error('Error fetching team:', error);\n      throw new Error('Failed to fetch team. Please check if the server is running.');\n    }\n  },\n  \n  create: async (team: Omit<FrontendTeam, 'id'>): Promise<FrontendTeam> => {\n    const backendTeamModel: Omit<TeamModel, 'id'> = {\n      ...(team as any)\n    };\n    try {\n      const res = await fetch(`${API_BASE_URL}/teams`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        body: JSON.stringify(backendTeamModel)\n      });\n      const backendResponse: TeamModel = await handleResponse(res);\n      return mapBackendTeamToFrontend(backendResponse);\n    } catch (error) {\n      console.error('Error creating team:', error);\n      throw new Error('Failed to create team. Please check if the server is running.');\n    }\n  },\n  \n  update: async (id: string, team: Partial<Omit<FrontendTeam, 'id'>>): Promise<FrontendTeam> => {\n    const backendTeamModel: Partial<Omit<TeamModel, 'id'>> = {\n      ...(team as any)\n    };\n    try {\n      const res = await fetch(`${API_BASE_URL}/teams/${id}`, {\n        method: 'PUT',\n        headers: defaultHeaders,\n        body: JSON.stringify(backendTeamModel)\n      });\n      const backendResponse: TeamModel = await handleResponse(res);\n      return mapBackendTeamToFrontend(backendResponse);\n    } catch (error) {\n      console.error('Error updating team:', error);\n      throw new Error('Failed to update team. Please check if the server is running.');\n    }\n  },\n  \n  delete: async (id: string): Promise<void> => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/teams/${id}`, {\n        method: 'DELETE',\n        headers: defaultHeaders\n      });\n      return handleResponse(res);\n    } catch (error) {\n      console.error('Error deleting team:', error);\n      throw new Error('Failed to delete team. Please check if the server is running.');\n    }\n  }\n};\n\n// Players API\nexport const playersApi = {\n  getByTeam: async (teamId: string): Promise<FrontendPlayer[]> => {\n    try {\n      console.log('API: Fetching players for team:', teamId);\n      const url = `${API_BASE_URL}/players${teamId ? `?team_id=${teamId}` : ''}`;\n      console.log('API: Request URL:', url);\n      \n      const res = await fetch(url, {\n        headers: defaultHeaders\n      });\n      \n      console.log('API: Response status:', res.status);\n      const backendPlayers: BackendPlayerModel[] = await handleResponse(res);\n      console.log('API: Received players from backend:', backendPlayers);\n      \n      const mappedPlayers = backendPlayers.map(mapBackendPlayerToFrontend);\n      console.log('API: Mapped players:', mappedPlayers);\n      \n      return mappedPlayers;\n    } catch (error) {\n      console.error('API: Error fetching players:', error);\n      throw new Error('Failed to fetch players. Please check if the server is running.');\n    }\n  },\n\n  create: async (player: Omit<FrontendPlayer, 'id'>): Promise<FrontendPlayer> => {\n    console.log('Creating player with data:', player);\n    const backendPlayerModel: Omit<BackendPlayerModel, 'id'> = {\n      name: player.name,\n      position: player.position,\n      number: player.number,\n      team_id: player.team_id,\n      team_name: player.team_name,\n      photo: player.photo,\n      nationality: player.nationality,\n      age: player.age,\n      height: player.height,\n      weight: player.weight,\n      stats: {\n        games: player.stats?.games || 0,\n        goals: player.stats?.goals || 0,\n        assists: player.stats?.assists || 0,\n        yellowCards: player.stats?.yellowCards || 0,\n        redCards: player.stats?.redCards || 0\n      }\n    };\n\n    console.log('Sending to backend:', backendPlayerModel);\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/players`, {\n        method: 'POST',\n        headers: defaultHeaders,\n        body: JSON.stringify(backendPlayerModel)\n      });\n      const backendResponse: BackendPlayerModel = await handleResponse(res);\n      console.log('Received response from backend:', backendResponse);\n      return mapBackendPlayerToFrontend(backendResponse);\n    } catch (error) {\n      console.error('Error creating player:', error);\n      throw new Error('Failed to create player. Please check if the server is running.');\n    }\n  },\n\n  update: async (id: string, player: Partial<Omit<FrontendPlayer, 'id'>>): Promise<FrontendPlayer> => {\n    console.log('Updating player with ID:', id, 'and data:', player);\n    const backendPlayerModel: Partial<Omit<BackendPlayerModel, 'id'>> = {\n      name: player.name,\n      position: player.position,\n      number: player.number,\n      team_id: player.team_id,\n      team_name: player.team_name,\n      photo: player.photo,\n      nationality: player.nationality,\n      age: player.age,\n      height: player.height,\n      weight: player.weight,\n      stats: player.stats ? {\n        games: player.stats.games || 0,\n        goals: player.stats.goals || 0,\n        assists: player.stats.assists || 0,\n        yellowCards: player.stats.yellowCards || 0,\n        redCards: player.stats.redCards || 0\n      } : undefined\n    };\n\n    console.log('Sending to backend:', backendPlayerModel);\n\n    try {\n      const res = await fetch(`${API_BASE_URL}/players/${id}`, {\n        method: 'PUT',\n        headers: defaultHeaders,\n        body: JSON.stringify(backendPlayerModel)\n      });\n      const backendResponse: BackendPlayerModel = await handleResponse(res);\n      console.log('Received response from backend:', backendResponse);\n      return mapBackendPlayerToFrontend(backendResponse);\n    } catch (error) {\n      console.error('Error updating player:', error);\n      throw new Error('Failed to update player. Please check if the server is running.');\n    }\n  },\n\n  delete: async (id: string): Promise<void> => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/players/${id}`, {\n        method: 'DELETE',\n        headers: defaultHeaders\n      });\n      return handleResponse(res);\n    } catch (error) {\n      console.error('Error deleting player:', error);\n      throw new Error('Failed to delete player. Please check if the server is running.');\n    }\n  }\n};\n\n// Matches API\nexport const matchesApi = {\n  getAll: async (): Promise<Match[]> => {\n    try {\n    const res = await fetch(`${API_BASE_URL}/matches`, {\n      headers: defaultHeaders\n    });\n      return await handleResponse(res);\n    } catch (error) {\n      console.error('Error fetching matches:', error);\n      throw new Error('Failed to fetch matches. Please check if the server is running.');\n    }\n  },\n  \n  getById: async (id: string): Promise<Match> => {\n    try {\n    const res = await fetch(`${API_BASE_URL}/matches/${id}`, {\n      headers: defaultHeaders\n    });\n      return await handleResponse(res);\n    } catch (error) {\n      console.error('Error fetching match:', error);\n      throw new Error('Failed to fetch match. Please check if the server is running.');\n    }\n  },\n  \n  create: async (match: Omit<Match, 'id'>): Promise<Match> => {\n    try {\n    const res = await fetch(`${API_BASE_URL}/matches`, {\n      method: 'POST',\n      headers: defaultHeaders,\n        body: JSON.stringify(match)\n      });\n      return await handleResponse(res);\n    } catch (error) {\n      console.error('Error creating match:', error);\n      throw new Error('Failed to create match. Please check if the server is running.');\n    }\n  },\n  \n  update: async (id: string, match: Partial<Omit<Match, 'id'>>): Promise<Match> => {\n    try {\n    const res = await fetch(`${API_BASE_URL}/matches/${id}`, {\n      method: 'PUT',\n      headers: defaultHeaders,\n        body: JSON.stringify(match)\n      });\n      return await handleResponse(res);\n    } catch (error) {\n      console.error('Error updating match:', error);\n      throw new Error('Failed to update match. Please check if the server is running.');\n    }\n  },\n  \n  delete: async (id: string): Promise<void> => {\n    try {\n      const res = await fetch(`${API_BASE_URL}/matches/${id}`, {\n      method: 'DELETE',\n      headers: defaultHeaders\n    });\n      await handleResponse(res);\n    } catch (error) {\n      console.error('Error deleting match:', error);\n      throw new Error('Failed to delete match. Please check if the server is running.');\n    }\n  }\n};\n\n// News API\nexport const newsApi = {\n  getAll: async (): Promise<News[]> => {\n    const res = await fetch(`${API_BASE_URL}/news`, {\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to fetch news');\n    return res.json();\n  },\n  \n  getById: async (id: string): Promise<News> => {\n    const res = await fetch(`${API_BASE_URL}/news/${id}`, {\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to fetch news item');\n    return res.json();\n  },\n  \n  create: async (news: Omit<News, 'id'>): Promise<News> => {\n    const res = await fetch(`${API_BASE_URL}/news`, {\n      method: 'POST',\n      headers: defaultHeaders,\n      body: JSON.stringify(news)\n    });\n    if (!res.ok) throw new Error('Failed to create news');\n    return res.json();\n  },\n  \n  update: async (id: string, news: Partial<Omit<News, 'id'>>): Promise<News> => {\n    const res = await fetch(`${API_BASE_URL}/news/${id}`, {\n      method: 'PUT',\n      headers: defaultHeaders,\n      body: JSON.stringify(news)\n    });\n    if (!res.ok) throw new Error('Failed to update news');\n    return res.json();\n  },\n  \n  delete: async (id: string): Promise<void> => {\n    const res = await fetch(`${API_BASE_URL}/news/${id}`, {\n      method: 'DELETE',\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to delete news');\n  }\n};\n\n// Media API\nexport const mediaApi = {\n  getAll: async (): Promise<Media[]> => {\n    const res = await fetch(`${API_BASE_URL}/media`, {\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to fetch media');\n    return res.json();\n  },\n  \n  getById: async (id: string): Promise<Media> => {\n    const res = await fetch(`${API_BASE_URL}/media/${id}`, {\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to fetch media item');\n    return res.json();\n  },\n  \n  create: async (media: Omit<Media, 'id'>): Promise<Media> => {\n    const res = await fetch(`${API_BASE_URL}/media`, {\n      method: 'POST',\n      headers: defaultHeaders,\n      body: JSON.stringify(media)\n    });\n    if (!res.ok) throw new Error('Failed to create media');\n    return res.json();\n  },\n  \n  update: async (id: string, media: Partial<Omit<Media, 'id'>>): Promise<Media> => {\n    const res = await fetch(`${API_BASE_URL}/media/${id}`, {\n      method: 'PUT',\n      headers: defaultHeaders,\n      body: JSON.stringify(media)\n    });\n    if (!res.ok) throw new Error('Failed to update media');\n    return res.json();\n  },\n  \n  delete: async (id: string): Promise<void> => {\n    const res = await fetch(`${API_BASE_URL}/media/${id}`, {\n      method: 'DELETE',\n      headers: defaultHeaders\n    });\n    if (!res.ok) throw new Error('Failed to delete media');\n  }\n};\n\n// Coaches API\nexport const getCoaches = async (): Promise<Coach[]> => {\n  const res = await fetch(`${API_BASE_URL}/coaches`, {\n    headers: defaultHeaders\n  });\n  if (!res.ok) {\n    throw new Error('Failed to fetch coaches');\n  }\n  return res.json();\n};\n\nexport const getCoach = async (id: string): Promise<Coach> => {\n  const res = await fetch(`${API_BASE_URL}/coaches/${id}`, {\n    headers: defaultHeaders\n  });\n  if (!res.ok) {\n    throw new Error('Failed to fetch coach');\n  }\n  return res.json();\n};\n\nexport const createCoach = async (coach: Omit<Coach, 'id'>): Promise<Coach> => {\n  const res = await fetch(`${API_BASE_URL}/coaches`, {\n    method: 'POST',\n    headers: defaultHeaders,\n    body: JSON.stringify(coach),\n  });\n  if (!res.ok) {\n    throw new Error('Failed to create coach');\n  }\n  return res.json();\n};\n\nexport const updateCoach = async (id: string, coach: Partial<Coach>): Promise<Coach> => {\n  const res = await fetch(`${API_BASE_URL}/coaches/${id}`, {\n    method: 'PUT',\n    headers: defaultHeaders,\n    body: JSON.stringify(coach),\n  });\n  if (!res.ok) {\n    throw new Error('Failed to update coach');\n  }\n  return res.json();\n};\n\nexport const deleteCoach = async (id: string): Promise<void> => {\n  const res = await fetch(`${API_BASE_URL}/coaches/${id}`, {\n    method: 'DELETE',\n    headers: defaultHeaders\n  });\n  if (!res.ok) {\n    throw new Error('Failed to delete coach');\n  }\n};\n\n// Teams API\nexport const getTeams = async (): Promise<TeamModel[]> => {\n  const res = await fetch(`${API_BASE_URL}/teams`, {\n    headers: defaultHeaders\n  });\n  if (!res.ok) {\n    throw new Error('Failed to fetch teams');\n  }\n  return res.json();\n}; "],"names":["API_BASE_URL","handleResponse","response","__async","errorText","errorMessage","e","text","error","defaultHeaders","mapBackendTeamToFrontend","backendTeam","_a","mapBackendPlayerToFrontend","backendPlayer","teamsApi","res","id","team","backendTeamModel","__spreadValues","backendResponse","playersApi","teamId","url","backendPlayers","mappedPlayers","player","_b","_c","_d","_e","backendPlayerModel","matchesApi","match","newsApi","news","getCoaches","createCoach","coach","updateCoach","deleteCoach","getTeams"],"mappings":"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"}